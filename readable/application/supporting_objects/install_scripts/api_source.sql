  CREATE TABLE "MAXWELL_API_LOGS" 
   (	"LOG_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"REQUEST_URL" VARCHAR2(1000), 
	"REQUEST_METHOD" VARCHAR2(10), 
	"RESPONSE_STATUS" VARCHAR2(10), 
	"RESPONSE_BODY" CLOB, 
	"LOG_TIME" TIMESTAMP (6) DEFAULT SYSDATE, 
	 PRIMARY KEY ("LOG_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_API_RESULTS" 
   (	"RESULT_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"RESPONSE_JSON" CLOB, 
	"FETCHED_ON" DATE DEFAULT SYSDATE, 
	 PRIMARY KEY ("RESULT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_ERROR_LOGS" 
   (	"ERROR_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"MODULE" VARCHAR2(100), 
	"ERROR_MESSAGE" VARCHAR2(4000), 
	"ERROR_TIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	 PRIMARY KEY ("ERROR_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_PARSED_USERS" 
   (	"ID" NUMBER, 
	"NAME" VARCHAR2(100), 
	"USERNAME" VARCHAR2(50), 
	"EMAIL" VARCHAR2(100), 
	"PHONE" VARCHAR2(50), 
	"WEBSITE" VARCHAR2(100), 
	"ADDRESS_STREET" VARCHAR2(100), 
	"ADDRESS_SUITE" VARCHAR2(50), 
	"ADDRESS_CITY" VARCHAR2(50), 
	"ADDRESS_ZIPCODE" VARCHAR2(20), 
	"GEO_LAT" VARCHAR2(20), 
	"GEO_LNG" VARCHAR2(20), 
	"COMPANY_NAME" VARCHAR2(100), 
	"COMPANY_CATCHPHRASE" VARCHAR2(200), 
	"COMPANY_BS" VARCHAR2(100), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;
create or replace PACKAGE maxwell_api_consume_pkg AS
   PROCEDURE fetch_users;
END maxwell_api_consume_pkg;
/




create or replace PACKAGE BODY maxwell_api_consume_pkg AS

  PROCEDURE fetch_users IS
    l_url      VARCHAR2(1000) := 'https://jsonplaceholder.typicode.com/users';
    l_response CLOB;
    l_status   VARCHAR2(10);
  BEGIN
    -- Call the API
    l_response := APEX_WEB_SERVICE.make_rest_request(
      p_url         => l_url,
      p_http_method => 'GET'
    );

    -- Get the HTTP status code
    l_status := APEX_WEB_SERVICE.g_status_code;

    -- Save raw JSON for logging/debugging
    INSERT INTO maxwell_api_results (response_json)
    VALUES (l_response);

    -- Only parse if we got a successful response
    IF l_status = 200 THEN
      -- Parse the response
      APEX_JSON.parse(l_response);

      -- Clear existing data before inserting new data (optional)
      DELETE FROM maxwell_parsed_users;

      FOR i IN 1 .. APEX_JSON.get_count(p_path => '.') LOOP
        INSERT INTO maxwell_parsed_users (
          id, name, username, email, phone, website,
          address_street, address_suite, address_city, address_zipcode,
          geo_lat, geo_lng,
          company_name, company_catchphrase, company_bs
        ) VALUES (
          APEX_JSON.get_number(p_path => '[' || i || '].id'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].name'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].username'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].email'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].phone'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].website'),

          APEX_JSON.get_varchar2(p_path => '[' || i || '].address.street'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].address.suite'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].address.city'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].address.zipcode'),

          APEX_JSON.get_varchar2(p_path => '[' || i || '].address.geo.lat'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].address.geo.lng'),

          APEX_JSON.get_varchar2(p_path => '[' || i || '].company.name'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].company.catchPhrase'),
          APEX_JSON.get_varchar2(p_path => '[' || i || '].company.bs')
        );
      END LOOP;
    END IF;

    -- Log the API call (convert CLOB to VARCHAR2 properly)
    INSERT INTO maxwell_api_logs (
      request_url, 
      request_method, 
      response_status, 
      response_body,
      log_time
    ) VALUES (
      l_url,
      'GET',
      TO_CHAR(l_status),
    CASE 
  WHEN DBMS_LOB.getlength(l_response) > 3950 THEN 
    DBMS_LOB.substr(l_response, 3950, 1) || '...[truncated]'
  ELSE 
    DBMS_LOB.substr(l_response, 4000, 1)
END,
      sysdate
    );
    
    COMMIT;

  EXCEPTION
  WHEN OTHERS THEN
    DECLARE
      v_err_msg VARCHAR2(4000);
    BEGIN
      v_err_msg := SQLERRM;
      
      INSERT INTO maxwell_error_logs (
        module, 
        error_message
      ) VALUES (
        'fetch_users', 
        v_err_msg
      );
      
      COMMIT;

      -- Re-raise the exception if needed
      RAISE;
    END;

  END fetch_users;

END maxwell_api_consume_pkg;
/



 